{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bartc\\\\Documents\\\\Github\\\\EF\\\\ef-app\\\\ui\\\\src\\\\context\\\\UserContext.tsx\";\nimport React from \"react\";\nimport { createToken, dablLoginUrl, damlPartyKey, damlTokenKey } from \"../config\";\nconst UserStateContext = React.createContext({\n  isAuthenticated: false\n});\nconst UserDispatchContext = React.createContext({});\n\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return {\n        isAuthenticated: true,\n        token: action.token,\n        party: action.party\n      };\n\n    case \"LOGIN_FAILURE\":\n      return {\n        isAuthenticated: false\n      };\n\n    case \"SIGN_OUT_SUCCESS\":\n      return {\n        isAuthenticated: false\n      };\n  }\n}\n\nconst UserProvider = ({\n  children\n}) => {\n  const party = localStorage.getItem(damlPartyKey);\n  const token = localStorage.getItem(damlTokenKey);\n  let initState = !!party && !!token ? {\n    isAuthenticated: true,\n    token,\n    party\n  } : {\n    isAuthenticated: false\n  };\n  const [state, dispatch] = React.useReducer(userReducer, initState);\n  return /*#__PURE__*/React.createElement(UserStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nfunction useUserState() {\n  const context = React.useContext(UserStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUserState must be used within a UserProvider\");\n  }\n\n  return context;\n}\n\nfunction useUserDispatch() {\n  const context = React.useContext(UserDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\n  }\n\n  return context;\n} // ###########################################################\n\n\nfunction loginUser(dispatch, party, userToken, history, setIsLoading, setError) {\n  setError(false);\n  setIsLoading(true);\n\n  if (!!party) {\n    const token = userToken || createToken(party);\n    localStorage.setItem(damlPartyKey, party);\n    localStorage.setItem(damlTokenKey, token);\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      token,\n      party\n    });\n    setError(false);\n    setIsLoading(false);\n    history.push(\"/app\");\n  } else {\n    dispatch({\n      type: \"LOGIN_FAILURE\"\n    });\n    setError(true);\n    setIsLoading(false);\n  }\n}\n\nconst loginDablUser = () => {\n  window.location.assign(`https://${dablLoginUrl}`);\n};\n\nfunction signOut(dispatch, history) {\n  localStorage.removeItem(\"daml.party\");\n  localStorage.removeItem(\"daml.token\");\n  dispatch({\n    type: \"SIGN_OUT_SUCCESS\"\n  });\n  history.push(\"/login\");\n}\n\nexport { UserProvider, useUserState, useUserDispatch, loginUser, loginDablUser, signOut };","map":{"version":3,"sources":["C:/Users/bartc/Documents/Github/EF/ef-app/ui/src/context/UserContext.tsx"],"names":["React","createToken","dablLoginUrl","damlPartyKey","damlTokenKey","UserStateContext","createContext","isAuthenticated","UserDispatchContext","userReducer","state","action","type","token","party","UserProvider","children","localStorage","getItem","initState","dispatch","useReducer","useUserState","context","useContext","undefined","Error","useUserDispatch","loginUser","userToken","history","setIsLoading","setError","setItem","push","loginDablUser","window","location","assign","signOut","removeItem"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { History } from 'history';\r\nimport { createToken, dablLoginUrl, damlPartyKey, damlTokenKey } from \"../config\";\r\n\r\ntype AuthenticatedUser = {\r\n  isAuthenticated : true\r\n  token : string\r\n  party : string\r\n}\r\n\r\ntype UnAthenticated = {\r\n  isAuthenticated : false\r\n}\r\n\r\ntype UserState = UnAthenticated | AuthenticatedUser\r\n\r\ntype LoginSuccess = {\r\n  type : \"LOGIN_SUCCESS\"\r\n  token : string\r\n  party : string\r\n}\r\n\r\ntype LoginFailure = {\r\n  type : \"LOGIN_FAILURE\"\r\n}\r\n\r\ntype SignoutSuccess = {\r\n  type : \"SIGN_OUT_SUCCESS\"\r\n}\r\n\r\ntype LoginAction = LoginSuccess | LoginFailure | SignoutSuccess\r\n\r\nconst UserStateContext = React.createContext<UserState>({ isAuthenticated: false });\r\nconst UserDispatchContext = React.createContext<React.Dispatch<LoginAction>>({} as React.Dispatch<LoginAction>);\r\n\r\nfunction userReducer(state : UserState, action : LoginAction) : UserState {\r\n  switch (action.type) {\r\n    case \"LOGIN_SUCCESS\":\r\n      return { isAuthenticated: true, token: action.token, party: action.party };\r\n    case \"LOGIN_FAILURE\":\r\n      return { isAuthenticated: false };\r\n    case \"SIGN_OUT_SUCCESS\":\r\n      return { isAuthenticated: false };\r\n  }\r\n}\r\n\r\nconst UserProvider : React.FC = ({ children }) => {\r\n  const party = localStorage.getItem(damlPartyKey);\r\n  const token = localStorage.getItem(damlTokenKey);\r\n\r\n  let initState : UserState = (!!party && !!token) ? { isAuthenticated : true, token, party } : { isAuthenticated : false };\r\n  const [state, dispatch] = React.useReducer<React.Reducer<UserState,LoginAction>>(userReducer, initState);\r\n\r\n  return (\r\n    <UserStateContext.Provider value={state}>\r\n      <UserDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </UserDispatchContext.Provider>\r\n    </UserStateContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useUserState() {\r\n  const context = React.useContext<UserState>(UserStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useUserState must be used within a UserProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction useUserDispatch() {\r\n  const context = React.useContext<React.Dispatch<LoginAction>>(UserDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\n\r\n// ###########################################################\r\n\r\nfunction loginUser(\r\n    dispatch : React.Dispatch<LoginAction>,\r\n    party : string,\r\n    userToken : string,\r\n    history : History,\r\n    setIsLoading : React.Dispatch<React.SetStateAction<boolean>>,\r\n    setError : React.Dispatch<React.SetStateAction<boolean>>) {\r\n  setError(false);\r\n  setIsLoading(true);\r\n\r\n  if (!!party) {\r\n    const token = userToken || createToken(party)\r\n    localStorage.setItem(damlPartyKey, party);\r\n    localStorage.setItem(damlTokenKey, token);\r\n\r\n    dispatch({ type: \"LOGIN_SUCCESS\", token, party });\r\n    setError(false);\r\n    setIsLoading(false);\r\n    history.push(\"/app\");\r\n  } else {\r\n    dispatch({ type: \"LOGIN_FAILURE\" });\r\n    setError(true);\r\n    setIsLoading(false);\r\n  }\r\n}\r\n\r\nconst loginDablUser = () => {\r\n  window.location.assign(`https://${dablLoginUrl}`);\r\n}\r\n\r\nfunction signOut(dispatch : React.Dispatch<LoginAction>, history : History) {\r\n  localStorage.removeItem(\"daml.party\");\r\n  localStorage.removeItem(\"daml.token\");\r\n\r\n  dispatch({ type: \"SIGN_OUT_SUCCESS\" });\r\n  history.push(\"/login\");\r\n}\r\n\r\nexport { UserProvider, useUserState, useUserDispatch, loginUser, loginDablUser, signOut };"]},"metadata":{},"sourceType":"module"}