{"ast":null,"code":"import React from \"react\";\nimport { useStreamQueries } from \"@daml/react\";\nimport { EF } from '@daml.js/ef-app/lib';\nexport default function FundingRequestList() {\n  const assets = useStreamQueries(EF.FundingContractRequest).contracts;\n  const defaultGiveProps = {\n    open: false,\n    title: \"Give Asset\",\n    defaultValue: {\n      newOwner: \"\"\n    },\n    fields: {\n      newOwner: {\n        label: \"New Owner\",\n        type: \"selection\",\n        items: [\"Alice\", \"Bob\"]\n      }\n    },\n    onClose: async function () {}\n  };\n  const [giveProps, setGiveProps] = useState(defaultGiveProps); // One can pass the original contracts CreateEvent\n\n  function showGive(asset) {\n    async function onClose(state) {\n      setGiveProps({ ...defaultGiveProps,\n        open: false\n      }); // if you want to use the contracts payload\n\n      if (!state || asset.payload.owner === state.newOwner) return;\n      await ledger.exercise(Asset.Give, asset.contractId, state);\n    }\n\n    ;\n    setGiveProps({ ...defaultGiveProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"/>\");\n}","map":{"version":3,"sources":["C:/Users/bartc/Documents/Github/EF/ef-app/ui/src/pages/fundingrequest/FundingRequest.tsx"],"names":["React","useStreamQueries","EF","FundingRequestList","assets","FundingContractRequest","contracts","defaultGiveProps","open","title","defaultValue","newOwner","fields","label","type","items","onClose","giveProps","setGiveProps","useState","showGive","asset","state","payload","owner","ledger","exercise","Asset","Give","contractId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAA2C,aAA3C;AACA,SAASC,EAAT,QAAmB,qBAAnB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AACzC,QAAMC,MAAM,GAAGH,gBAAgB,CAACC,EAAE,CAACG,sBAAJ,CAAhB,CAA4CC,SAA3D;AAEA,QAAMC,gBAAyC,GAAG;AAChDC,IAAAA,IAAI,EAAE,KAD0C;AAEhDC,IAAAA,KAAK,EAAE,YAFyC;AAGhDC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,QAAQ,EAAG;AAAb,KAHkC;AAIhDC,IAAAA,MAAM,EAAE;AACND,MAAAA,QAAQ,EAAG;AACTE,QAAAA,KAAK,EAAE,WADE;AAETC,QAAAA,IAAI,EAAE,WAFG;AAGTC,QAAAA,KAAK,EAAE,CAAE,OAAF,EAAW,KAAX;AAHE;AADL,KAJwC;AAShDC,IAAAA,OAAO,EAAE,kBAAiB,CAAE;AAToB,GAAlD;AAYA,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BC,QAAQ,CAACZ,gBAAD,CAA5C,CAfyC,CAgBzC;;AACA,WAASa,QAAT,CAAkBC,KAAlB,EAA6C;AAC3C,mBAAeL,OAAf,CAAuBM,KAAvB,EAA4C;AAC1CJ,MAAAA,YAAY,CAAC,EAAE,GAAGX,gBAAL;AAAuBC,QAAAA,IAAI,EAAE;AAA7B,OAAD,CAAZ,CAD0C,CAE1C;;AACA,UAAI,CAACc,KAAD,IAAUD,KAAK,CAACE,OAAN,CAAcC,KAAd,KAAwBF,KAAK,CAACX,QAA5C,EAAsD;AACtD,YAAMc,MAAM,CAACC,QAAP,CAAgBC,KAAK,CAACC,IAAtB,EAA4BP,KAAK,CAACQ,UAAlC,EAA8CP,KAA9C,CAAN;AACD;;AAAA;AACDJ,IAAAA,YAAY,CAAC,EAAE,GAAGX,gBAAL;AAAuBC,MAAAA,IAAI,EAAE,IAA7B;AAAmCQ,MAAAA;AAAnC,KAAD,CAAZ;AACD;;AAAA;AAGH,sBACE,+CADF;AAOD","sourcesContent":["import React from \"react\";\r\nimport Contracts from \"../../components/Contracts/Contracts\";\r\nimport { useStreamQueries, useQuery } from \"@daml/react\";\r\nimport { EF } from '@daml.js/ef-app/lib';\r\n\r\nexport default function FundingRequestList() {\r\n    const assets = useStreamQueries(EF.FundingContractRequest).contracts;\r\n\r\n    const defaultGiveProps : InputDialogProps<Give> = {\r\n      open: false,\r\n      title: \"Give Asset\",\r\n      defaultValue: { newOwner : \"\" },\r\n      fields: {\r\n        newOwner : {\r\n          label: \"New Owner\",\r\n          type: \"selection\",\r\n          items: [ \"Alice\", \"Bob\" ] } },\r\n      onClose: async function() {}\r\n    };\r\n  \r\n    const [ giveProps, setGiveProps ] = useState(defaultGiveProps);\r\n    // One can pass the original contracts CreateEvent\r\n    function showGive(asset : Asset.CreateEvent) {\r\n      async function onClose(state : Give | null) {\r\n        setGiveProps({ ...defaultGiveProps, open: false});\r\n        // if you want to use the contracts payload\r\n        if (!state || asset.payload.owner === state.newOwner) return;\r\n        await ledger.exercise(Asset.Give, asset.contractId, state);\r\n      };\r\n      setGiveProps({ ...defaultGiveProps, open: true, onClose})\r\n    };\r\n  \r\n\r\n  return (\r\n    <>\r\n      \r\n      />\r\n\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}