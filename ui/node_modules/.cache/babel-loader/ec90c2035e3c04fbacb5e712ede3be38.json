{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bartc\\\\Documents\\\\Github\\\\EF\\\\ef-app\\\\ui\\\\src\\\\pages\\\\login\\\\Login.tsx\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { useUserDispatch, loginUser, loginDablUser } from \"../../context/UserContext\";\nimport { isLocalDev } from \"../../config\";\nimport useStyles from \"./styles\";\nimport logo from \"./logo.svg\";\n\nconst Login = props => {\n  var classes = useStyles();\n  var userDispatch = useUserDispatch();\n  var [isLoading, setIsLoading] = useState(false);\n  var [error, setError] = useState(false);\n  var [loginValue, setLoginValue] = useState(\"\");\n  var [passwordValue, setPasswordValue] = useState(\"\");\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logotypeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"logo\",\n    className: classes.logotypeImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.logotypeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"App Template\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fade, {\n    in: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    className: classes.errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Something is wrong with your login or password :(\")), !isLocalDev && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: classes.dablLoginButton,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    onClick: loginDablUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }\n  }, \"Log in with DABL\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }\n  }, \"OR\")), /*#__PURE__*/React.createElement(TextField, {\n    id: \"email\",\n    InputProps: {\n      classes: {\n        underline: classes.textFieldUnderline,\n        input: classes.textField\n      }\n    },\n    value: loginValue,\n    onChange: e => setLoginValue(e.target.value),\n    onKeyDown: e => {\n      if (e.key === \"Enter\") {\n        loginUser(userDispatch, loginValue, passwordValue, props.history, setIsLoading, setError);\n      }\n    },\n    margin: \"normal\",\n    placeholder: \"Username\",\n    type: \"email\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"password\",\n    InputProps: {\n      classes: {\n        underline: classes.textFieldUnderline,\n        input: classes.textField\n      }\n    },\n    value: passwordValue,\n    onChange: e => setPasswordValue(e.target.value),\n    onKeyDown: e => {\n      if (e.key === \"Enter\") {\n        loginUser(userDispatch, loginValue, passwordValue, props.history, setIsLoading, setError);\n      }\n    },\n    margin: \"normal\",\n    placeholder: \"Password\",\n    type: \"password\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 26,\n    className: classes.loginLoader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    disabled: loginValue.length === 0,\n    onClick: () => loginUser(userDispatch, loginValue, passwordValue, props.history, setIsLoading, setError),\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }\n  }, \"Login\"))))));\n};\n\nexport default withRouter(Login);","map":{"version":3,"sources":["C:/Users/bartc/Documents/Github/EF/ef-app/ui/src/pages/login/Login.tsx"],"names":["React","useState","withRouter","Grid","CircularProgress","Typography","Button","TextField","Fade","useUserDispatch","loginUser","loginDablUser","isLocalDev","useStyles","Login","props","classes","userDispatch","isLoading","setIsLoading","error","setError","loginValue","setLoginValue","passwordValue","setPasswordValue","container","logotypeContainer","logo","logotypeImage","logotypeText","formContainer","form","errorMessage","dablLoginButton","underline","textFieldUnderline","input","textField","e","target","value","key","history","formButtons","loginLoader","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport { useUserDispatch, loginUser, loginDablUser } from \"../../context/UserContext\";\r\nimport { isLocalDev } from \"../../config\";\r\nimport useStyles from \"./styles\";\r\nimport logo from \"./logo.svg\";\r\n\r\nconst Login = (props : RouteComponentProps) => {\r\n  var classes = useStyles();\r\n  var userDispatch = useUserDispatch();\r\n  var [isLoading, setIsLoading] = useState(false);\r\n  var [error, setError] = useState(false);\r\n  var [loginValue, setLoginValue] = useState(\"\");\r\n  var [passwordValue, setPasswordValue] = useState(\"\");\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <div className={classes.logotypeContainer}>\r\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\r\n        <Typography className={classes.logotypeText}>App Template</Typography>\r\n      </div>\r\n      <div className={classes.formContainer}>\r\n        <div className={classes.form}>\r\n            <React.Fragment>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Something is wrong with your login or password :(\r\n                </Typography>\r\n              </Fade>\r\n              {!isLocalDev &&\r\n                <>\r\n                  <Button className={classes.dablLoginButton} variant=\"contained\" color=\"primary\" size=\"large\" onClick={loginDablUser}>\r\n                    Log in with DABL\r\n                  </Button>\r\n                  <Typography>\r\n                    OR\r\n                  </Typography>\r\n                </>}\r\n              <TextField\r\n                id=\"email\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={loginValue}\r\n                onChange={e => setLoginValue(e.target.value)}\r\n                onKeyDown={e => {\r\n                  if (e.key === \"Enter\") {\r\n                    loginUser(\r\n                      userDispatch,\r\n                      loginValue,\r\n                      passwordValue,\r\n                      props.history,\r\n                      setIsLoading,\r\n                      setError,\r\n                    )\r\n                  }\r\n                }}\r\n                margin=\"normal\"\r\n                placeholder=\"Username\"\r\n                type=\"email\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={passwordValue}\r\n                onChange={e => setPasswordValue(e.target.value)}\r\n                onKeyDown={e => {\r\n                  if (e.key === \"Enter\") {\r\n                    loginUser(\r\n                      userDispatch,\r\n                      loginValue,\r\n                      passwordValue,\r\n                      props.history,\r\n                      setIsLoading,\r\n                      setError,\r\n                    )\r\n                  }\r\n                }}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.formButtons}>\r\n                {isLoading ?\r\n                  <CircularProgress size={26} className={classes.loginLoader} />\r\n                : <Button\r\n                    disabled={loginValue.length === 0}\r\n                    onClick={() =>\r\n                      loginUser(\r\n                        userDispatch,\r\n                        loginValue,\r\n                        passwordValue,\r\n                        props.history,\r\n                        setIsLoading,\r\n                        setError,\r\n                      )\r\n                    }\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                  >\r\n                    Login\r\n                  </Button>}\r\n              </div>\r\n            </React.Fragment>\r\n        </div>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);"]},"metadata":{},"sourceType":"module"}